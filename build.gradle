plugins {
	id 'java'
	id 'jacoco'
	id "org.sonarqube" version "2.8"
	id 'org.springframework.boot' version '2.3.1.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id "org.liquibase.gradle" version "2.0.2"
}

group = 'org.speech4j'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
	mavenCentral()
}

dependencyManagement {
	imports {
		mavenBom 'org.junit:junit-bom:5.6.0'
		mavenBom 'org.testcontainers:testcontainers-bom:1.13.0'
	}
}

diff.dependsOn assemble
diffChangeLog.dependsOn compileJava

diffChangeLog {
	jvmArgs(['--enable-preview'])
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
// R2DBC
	implementation 'io.r2dbc:r2dbc-spi:0.8.1.RELEASE'
	implementation 'io.r2dbc:r2dbc-postgresql:0.8.2.RELEASE'
	implementation 'org.springframework.data:spring-data-r2dbc:1.1.0.RELEASE'
// VALIDATION
	implementation 'org.hibernate:hibernate-validator:6.1.5.Final'
	implementation 'org.glassfish:javax.el:3.0.1-b11'
// Spring-security-crypto dependency to encode passwords
	implementation 'org.springframework.security:spring-security-crypto'
// Json dependency for transferring credentials to db
	implementation 'org.json:json:20190722'
// Lombok dependencies
	implementation 'org.projectlombok:lombok'
	annotationProcessor "org.projectlombok:lombok"
// Liquibase dependencies
	implementation 'org.liquibase:liquibase-core:3.8.9'
	liquibaseRuntime 'org.liquibase.ext:liquibase-hibernate5:3.8'
	liquibaseRuntime sourceSets.main.runtimeClasspath

//Testing dependencies
	testImplementation 'org.junit.jupiter:junit-jupiter-api'
	testImplementation 'org.junit.jupiter:junit-jupiter-params'
	testImplementation 'org.testcontainers:testcontainers'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:postgresql'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}

}

test {
	useJUnitPlatform()
}

sonarqube {
	properties {
		property "sonar.projectKey", "speech4j_tenant-service"
		property "sonar.sourceEncoding", "UTF-8"
		property "sonar.host.url", "https://sonarcloud.io"
	}
}

jacocoTestReport {
	reports {
		xml.enabled true
		xml.destination file("${buildDir}/reports/jacoco/text.xml")
		html.enabled false
		csv.enabled false
	}
}

project.tasks["sonarqube"].dependsOn "jacocoTestReport"


//===Liquibase configurations===
Properties properties = new Properties()
Properties metadata = new Properties()
metadata.load(new FileInputStream("src/main/resources/liquibase-metadata.properties"))
properties = metadata
Properties tenant = new Properties()
tenant.load(new FileInputStream("src/main/resources/liquibase-tenant.properties"))

if(project.hasProperty('schemaType')){
	def requiredSchemaType = 'tenant'
	def inputSchemaType = project.property('schemaType')
	//Checking of an input schema type
	properties = requiredSchemaType.equals(inputSchemaType) ? tenant : properties
}
def changeLogFilePath = properties.getProperty('changeLogFile')
def fileCounter = new File(changeLogFilePath).list().length + 1
def getFileVersion = { number ->
	def count = 0
	while(number > 1){
		number /= 10
		count++
	}
	return count == 0 || count == 1 ? "00" : (count == 2) ? "0" : ""
}
def fileVersion = getFileVersion(fileCounter) + fileCounter
def diffLog = changeLogFilePath + properties.getProperty('changeLogFileName') + fileVersion + ".xml"

liquibase {
	activities {
		main {
			changeLogFile diffLog
			//hibernate entities
			referenceUrl properties.getProperty('referenceUrl')
			//current db schema
			url 'jdbc:postgresql://' + System.getenv('DB_HOST') + ':' + System.getenv('DB_PORT') + '/' + System.getenv('DB_NAME') +'?currentSchema=' + properties.getProperty('schema')
			username System.getenv('DB_USERNAME')
			password System.getenv('DB_PASSWORD')
			referenceDriver 'liquibase.ext.hibernate.database.connection.HibernateDriver'
			excludeObjects 'table:content_contents,content_tags,content_content_tag'
		}
	}
}

tasks.withType(JavaCompile).each {
	it.options.compilerArgs.add('--enable-preview')
}

test {
	jvmArgs(['--enable-preview'])
}